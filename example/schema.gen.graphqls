interface Creature {
  species: String!
}

type Dog implements Creature {
  name: String!
  breed: DogBreed
  species: String!
}

enum DogBreed {
  "A small dog breed."
  SMALL
  "A medium dog breed."
  MEDIUM
  "A large dog breed."
  LARGE
}

type Cat implements Creature {
  name: String!
  species: String!
}

union Animal = Dog | Cat

scalar Email

scalar DateTime

interface Node {
  "The globally unique identifier for the node."
  id: ID!
  "The date/time when the node was created."
  createdAt: DateTime!
  "The date/time when the node was last updated."
  updatedAt: DateTime!
}

type User implements Node {
  "Email address of the user."
  email: Email! @unique
  "Password for the user account. This is hidden from clients."
  password: String! @secret
  "Full name of the user."
  name: String! @computed
  "The globally unique identifier for the node."
  id: ID!
  "The date/time when the node was created."
  createdAt: DateTime!
  "The date/time when the node was last updated."
  updatedAt: DateTime!
}

type Mutation {
  "Creates a new user."
  createAccount(email: Email!, password: String!): Boolean!
}

type Query {
  "Returns the current authenticated user."
  caller: User
  "Returns a user by ID, if they exist and the caller has access to it."
  user(id: ID!): User
  "Returns all users that the caller has access to."
  users: UserConnection
}

"A connection to a list of `User` items."
type UserConnection {
  "A list of `User` objects."
  nodes: [User!]!
  "Information to aid in pagination."
  pageInfo: PageInfo
  "Returns the first _n_ elements from the list."
  first: Int
  "Returns the elements in the list that come after the specified cursor."
  after: String
}

type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}