scalar Email @ts(type: "string")

scalar DateTime @ts(type: "Date")

interface Node {
    "The globally unique identifier for the node."
    id: ID!
    "The date/time when the node was created."
    createdAt: DateTime!
    "The date/time when the node was last updated."
    updatedAt: DateTime!
}

type User implements Node {
    "Email address of the user."
    email: Email! @unique
    "Password for the user account. This is hidden from clients."
    password: String! @secret
    "Full name of the user."
    name: String! @computed
}

extend type Query {
    "Returns the current authenticated user."
    caller: User
    "Returns a user by ID, if they exist and the caller has access to it."
    user(id: ID!): User
    "Returns all users that the caller has access to."
    users: UserConnection @connection(for: "User")
}

extend type Mutation {
    "Creates a new user."
    createAccount(email: Email!, password: String!): Boolean!
}